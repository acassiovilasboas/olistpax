<?php


namespace Tests\Controllers;


use App\Models\Category;
use CoffeeCode\DataLayer\Connect;

class CategoryTest extends \PHPUnit\Framework\TestCase
{
    private $arrayCategory;

    protected function setUp(): void
    {
        Connect::getInstance()->beginTransaction();

        $this->arrayCategory = ['name' => 'alimento'];

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        unset($this->objectCategory);
        unset($this->objectProduct);

        Connect::getInstance()->rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testIndexOfCategorySentRequestWithDatabaseEmptyMustReturnFalse()
    {
        unset($this->objectCategory);

        $objectCategory = (new Category());

        $classFake = $this->createMock(Category::class);
        $classFake->method('fetch')->willReturn($objectCategory);

        $response = (new \App\Controllers\Category())->index();

        $this->assertFalse($response);
        $this->assertIsNotArray($response);
    }

    public function testIndexOfCategorySentRequestWithDatabasePopulateMustReturnArray()
    {
        $objectCategory = (new \App\Controllers\Category())->create($this->arrayCategory);

        $classFake = $this->createMock(Category::class);
        $classFake->expects($this->any())->method('find')->willReturn($objectCategory);

        $response = (new \App\Controllers\Category())->index();

        $this->assertIsArray($response);
    }

    public function testCreateOfCategorySentRequestEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->create([]);

        $this->assertFalse($response);
    }

    public function testCreateOfCategorySentRequestTermRequiredEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->create(['name' => '']);

        $this->assertFalse($response);
    }

    public function testCreateOfCategorySentRequestTermInvalidRequiredEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->create(['term_invalid' => '']);

        $this->assertFalse($response);
    }

    public function testFindByIdOfCategorySentRequestRequestEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->findById([]);

        $this->assertFalse($response);
    }

    public function testFindByIdOfCategorySentRequestTermRequiredInvalidMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->findById(['term_invalid' => '']);

        $this->assertFalse($response);
    }

    public function testFindByIdOfCategorySentRequestValueRequiredEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->findById(['id' => '']);

        $this->assertFalse($response);
    }

    public function testFindByIdOfCategorySentRequestValueOfIdNotExistMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->findById(['name' => 9999999]);

        $this->assertFalse($response);
    }

    public function testFindByIdOfCategoryWithDatabaseEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->findById(['id' => 5]);

        $this->assertFalse($response);
    }

    public function testFindByIdOfCategorySentRequestValidMustReturnTrue()
    {
        $objectCategory = (new \App\Controllers\Category())->create($this->arrayCategory);
        $idOfObject = $objectCategory->data()->id;
        $classFake = $this->createMock(Category::class);
        $classFake->expects($this->any())->method('find')->willReturn($objectCategory);

        $response = (new \App\Controllers\Category())->findById(['id' => $idOfObject]);

        $this->assertIsObject($response);
    }

    public function testEditOfCategorySentRequestValueOfIdNotExistMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->edit(['name' => 9999999]);

        $this->assertFalse($response);
    }

    public function testEditOfCategorySentRequestKeyNotExistMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->edit(['key_not_exist' => 9999999]);

        $this->assertFalse($response);
    }

    public function testEditOfCategorySentRequestIdEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->edit(['id' => '']);

        $this->assertFalse($response);
    }

    public function testEditOfCategorySentRequestIdInTextEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->edit(['id' => 'text_invalid']);

        $this->assertFalse($response);
    }

    public function testEditOfCategorySentRequestEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->edit([]);

        $this->assertFalse($response);
    }

    public function testEditOfCategoryErrorInternServerMustReturnFalse()
    {
        $objectCategory = (new \App\Controllers\Category())->create($this->arrayCategory);


        $response = (new \App\Controllers\Category())->edit(['id'=> $objectCategory->data()->id, 'name' => 'new_name']);

        $this->assertIsObject($response);
    }

    public function testDeleteOfCategorySentRequestValueOfIdNotExistMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->delete(['name' => 9999999]);

        $this->assertFalse($response);
    }

    public function testDeleteOfCategorySentRequestKeyNotExistMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->delete(['key_not_exist' => 5]);

        $this->assertFalse($response);
    }

    public function testDeleteOfCategorySentRequestIdEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->delete(['id' => null]);

        $this->assertFalse($response);
    }

    public function testDeleteOfCategorySentRequestIdEmptyMustReturnFakklse()
    {
        $response = (new \App\Controllers\Category())->delete(['id' => 7]);

        $this->assertFalse($response);
    }

    public function testDeleteOfCategorySentRequestEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Category())->delete([]);

        $this->assertFalse($response);
    }

    public function testDeleteOfCategoryErrorInternServerMustReturnFalse()
    {
        $objectCategory = (new \App\Controllers\Category())->create($this->arrayCategory);

        $response = (new \App\Controllers\Category())->delete(['id'=> $objectCategory->data()->id]);

        $this->assertTrue($response);
    }
}