<?php


namespace Tests\Controllers;


use App\Models\Category;
use App\Models\Product;
use CoffeeCode\DataLayer\Connect;
use CoffeeCode\DataLayer\DataLayer;

class ProductTest extends \PHPUnit\Framework\TestCase
{
    private $arrayProduct = [];
    private $arrayCategory = [];
    private $objectCategory;
    private $objectProduct;

    protected function setUp(): void
    {
        Connect::getInstance()->beginTransaction();

        $this->arrayCategory = ['name' => 'alimento'];
        $this->objectCategory = (new \App\Controllers\Category())->create($this->arrayCategory);

        $this->arrayProduct = [
            'name' => 'sab찾o em p처',
            'category_id' => $this->objectCategory->data()->id,
            'price' => 6.90,
            'quantity' => 5
        ];

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        unset($this->objectCategory);
        unset($this->objectProduct);

        Connect::getInstance()->rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testFunctionIndexMustReturnFalseBecauseProductIsEmpty()
    {
        $objectEmpty = (new Product());

        $classProductFake = $this->createMock(DataLayer::class);
        $classProductFake->expects($this->any())->method('__set')->willReturn($objectEmpty);

        $response = \App\Controllers\Product::index();

        $this->assertFalse($response);
    }

    public function testFunctionIndexMustReturnArrayOfProduct()
    {
        $this->objectProduct = (new \App\Controllers\Product())->create($this->arrayProduct);

        $classProductFake = $this->createMock(DataLayer::class);
        $classProductFake->method('__set')->willReturn($this->objectProduct);

        $response = (new \App\Controllers\Product())->index();

        $this->assertIsArray($response);
    }

    public function dataProvider(): array
    {
        return [
            [
                (new \App\Controllers\Product())->create([
                    'name' => 'sab찾o em p처',
                    'category_id' => 9999339,
                    'price' => 6.90,
                    'quantity' => 5
                ])
            ],
            [
                (new \App\Controllers\Product())->create([
                    'name' => 'desinfetante',
                    'price' => 2.50,
                    'quantity' => 12
                ])
            ],
            [
                (new \App\Controllers\Product())->create([
                    'name' => 'desinfetante'
                ])
            ],
            [
                (new \App\Controllers\Product())->create([
                    'quantity' => 5
                ])
            ],
            [
                (new \App\Controllers\Product())->create([
                    'price' => 6.90,
                ])
            ],
            [
                (new \App\Controllers\Product())->create([
                    'category_id' => 99999,
                    'quantity' => 5
                ])
            ],
            [
                (new \App\Controllers\Product())->create([
                    'category_id' => 99999,
                    'price' => 6.90,
                ])
            ],
            [
                (new \App\Controllers\Product())->create([
                    'category_id' => 99999,
                ])
            ],
            [
                (new \App\Controllers\Product())->create([])
            ],
        ];
    }

    /**
     * @dataProvider dataProvider
     */
    public function testForCreateProductWithFieldMultiplesErrors($response)
    {
        $this->assertFalse($response);
    }

    public function testForCreateProductSentArrayEmptyHasReturnedFalse()
    {
        $response = (new \App\Controllers\Product())->create([]);

        $this->assertFalse($response);
    }

    public function testForCreateProductWithTermPriceNotFoundMustReturnFalse()
    {
        $response = (new \App\Controllers\Product())->create([
            'name' => 'desinfetante',
            'category_id' => $this->objectCategory->data()->id,
            'quantity' => 12
        ]);
        $this->assertFalse($response);
    }

    public function testFoCreateProductWithNumberIdOfCategoryInvalidMustReturnFalse()
    {
        $response = (new \App\Controllers\Product())->create([
            'name' => 'desinfetante',
            'category_id' => 99999999,
            'price' => 25.0,
            'quantity' => 12
        ]);
        $this->assertFalse($response);
    }

    public function testForCreateProductWithTermTypeTextInFieldTypeFloatMustReturnFalse()
    {
        $classProductFake = $this->createMock(Product::class);
        $classProductFake->method('save')->willReturn(false);

        $response = (new \App\Controllers\Product())->create([
            'name' => 'desinfetante',
            'category_id' => $this->objectCategory->data()->id,
            'price' => 'aaaa',
            'quantity' => 12
        ]);
        $this->assertFalse($response);
    }

    public function testForFindByIdWithArrayEmptyMustReturnFalse()
    {
        $response = (new \App\Controllers\Product())->findById([]);

        $this->assertFalse($response);
    }

    public function testForFindByIdWithIdNotExistMustReturnFalse()
    {
        $response = (new \App\Controllers\Product())->findById(['id' => 999999]);

        $this->assertFalse($response);
    }

    public function testForFindByIdWithOtherTermInArrayMustReturnFalse()
    {
        $response = (new \App\Controllers\Product())->findById(['key_invalid' => 1]);

        $this->assertFalse($response);
    }

    public function testForFindByIdWithMockClassMustReturnTrue()
    {
        $this->objectProduct = (new \App\Controllers\Product())->create($this->arrayProduct);

        $classProductFake = $this->createMock(Product::class);
        $classProductFake->method('findById')->willReturn($this->objectProduct);

        $response = (new \App\Controllers\Product())->findById(['id' => $this->objectProduct->data()->id]);
        $this->assertIsObject($response);
        $this->assertEquals($response, $this->objectProduct->data());
    }

}